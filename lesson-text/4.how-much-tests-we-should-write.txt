Невозможно написать тесты, которые гарантируют 100% работоспособность
кода. Для этого потребовалось бы реализовать проверки всех возможных
аргументов, что физически неосуществимо. С другой стороны, без тестов
вообще нет никаких гарантий, только честное слово разработчиков.

При написании тестов нужно ориентироваться на разнообразие входных
данных. У любой функции есть один или несколько основных сценариев
использования. Например, в случае capitalize() — это любое слово.
Достаточно написать ровно одну проверку, которая покрывает этот
сценарий. Дальше нужно смотреть на "пограничные случаи". Это ситуации,
в которых код может повести себя по-особенному:

- Работа с пустой строкой
- Обработка null
- Деление на ноль (в большинстве языков вызывает ошибку)
- Специфические ситуации для конкретных алгоритмов

Для capitalize() пограничным случаем будет пустая строка:

if (capitalize('') !== '') {
  throw new Error('Функция работает неверно!');
}

Добавив тест на пустую строку, мы увидим, что вызов показанной в
начале урока функции capitalize() завершается с ошибкой. Внутри
неё идёт обращение к первому индексу строки без проверки его
существования. Исправленная версия кода:

Было ->

    const capitalize = (text) => {
      const firstChar = text[0].toUpperCase();
      const restSubstring = text.slice(1);
      return `${firstChar}${restSubstring}`;
    };

-----------------------------------------------------------------

Стало ->

    const capitalize = (text) => {
      if (text === '') {
        return '';
      }
      const firstChar = text[0].toUpperCase();
      const restSubstring = text.slice(1);
      return `${firstChar}${restSubstring}`;
    };


В большом числе ситуаций пограничные случаи требуют отдельной
обработки, наличия условных конструкций. Тесты должны быть
построены таким образом, чтобы они затрагивали каждую такую
конструкцию.

--------


Проверка входных данных

Особняком стоят ошибки типов входных данных. Например, в функцию capitalize()
можно передать число вместо строки. Как она должна себя вести в таком случае?
Нужно ли писать такой тест?

Ещё один интересный вопрос. Нужно ли внутри capitalize() обрабатывать такие
ситуации? Ответ — не нужно.

Ответственность за передачу правильных данных в функцию capitalize()
лежит не на ней, а на коде, который вызывает эту функцию. И если он хорошо
протестирован, то подобная ошибка либо обнаружится, либо вообще не возникнет.

Но даже если ошибка обрабатывается внутри функции, не надо пытаться написать тесты,
покрывающие каждую ошибку. Это выливается в огромное число тестов, которые требуют
поддержки и времени на написание. Нужно уметь вовремя остановиться и двигаться
дальше, к покрытию другого кода.

см. ./../lesson-files/example-4

Запуск: node tests/capitalize.test.js