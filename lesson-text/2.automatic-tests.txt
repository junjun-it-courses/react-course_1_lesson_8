Всё, что требуется от автоматических тестов — повторить проверки, которые мы
выполняли, делая ручное тестирование. Для этого достаточно старого доброго if и
исключений.

/ Дословно: выбросить новую ошибку
// Исключения бросают

throw new Error('описание исключения');

// Код, следующий за этим выражением, не выполнится, а сам скрипт завершится с
ошибкой
console.log('nothing');

const capitalize = (text) => {
  const firstChar = text[0].toUpperCase();
  const restSubstring = text.slice(1);
  return `${firstChar}${restSubstring}`;
};

Пример теста:

if (capitalize('hello') !== 'Hello') {
  // Если результат функции не равен ожидаемому значению
  // Выбрасываем исключение и завершаем выполнение теста
  throw new Error('Функция работает неверно!');
}

Из примера выше видно, что тесты — это точно такой же код, как и любой другой.
Он работает в том же окружении и подчиняется тем же правилам, например, стандартам
кодирования. А ещё он может содержать ошибки. Но это не значит, что надо писать
тесты на тесты. Избежать всех ошибок невозможно, да и не нужно, иначе стоимость
разработки стала бы неоправданно высокой.

В коде тесты, как правило, складывают в специальную директорию в корне
проекта. Обычно она называется tests.

src/
├── bin
│   └── script.js
├── half.js
└── index.js
tests/
└── half.test.js

Структура этой директории зависит от того, на базе чего пишутся тесты, например,
на базе какого фреймворка. В простых случаях, она отражает структуру исходного
кода. Если предположить, что наша функция capitalize(text) определена в файле
src/capitalize.js, то её тест лучше поместить в файл tests/capitalize.test.js.
Слово test в имени модуля с тестами, используется только для более явного
обозначения цели файла.

Теперь при любых изменениях, затрагивающих эту функцию, важно не забывать
запускать тесты:

node tests/capitalize.test.js
# Если все хорошо, код молча выполнится.
# Если есть ошибка, то будет выведено сообщение об ошибке.
